package fr.inrae.act.bagap.chloe.concept.grainbocager.api;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.Properties;

import fr.inrae.act.bagap.chloe.concept.grainbocager.analysis.procedure.farm.DiagnosticGrainBocagerExploitation;
import fr.inrae.act.bagap.chloe.concept.grainbocager.analysis.procedure.farm.DiagnosticGrainBocagerExploitationManager;

public class GrainBocagerExploitationAPI {

	public static void main(String[] args) {
		if(args[0].endsWith(".properties")){
			launchBatch(args[0]);
		}else{
			throw new IllegalArgumentException("argument "+args[0]+" is not recognize");
		}
	}
	
	public static void launchBatch(String file){
		try{
			Properties properties = new Properties();
	        Reader in = new InputStreamReader(new FileInputStream(file), "UTF8");
			properties.load(in);
			in.close();
			
			long begin = System.currentTimeMillis();
			
			DiagnosticGrainBocagerExploitationManager manager = new DiagnosticGrainBocagerExploitationManager(); 
			
			importParameters(manager, properties);
			
			DiagnosticGrainBocagerExploitation diagnostic = manager.build();
			diagnostic.run();
			
			long end = System.currentTimeMillis();
			System.out.println("time computing : "+(end - begin));
			
		}catch(FileNotFoundException ex){
			ex.printStackTrace();
		}catch(IOException ex){
			ex.printStackTrace();
		}
	}
	
	private static void importParameters(DiagnosticGrainBocagerExploitationManager manager, Properties properties) {
		
		importForce(manager, properties);
		importParcellaire(manager, properties);
		importBocage(manager, properties);
		
		importAmenagement(manager, properties);
		importScenario(manager, properties);
		importAttributScenario(manager, properties);
		
		importGrainBocagerCellSize(manager, properties);
		importGrainBocagerWindowRadius(manager, properties);
		importThresholds(manager, properties);
		
		importOutputFolder(manager, properties);
	}
	
	private static void importBocage(DiagnosticGrainBocagerExploitationManager manager, Properties properties) {
		if(properties.containsKey("bocage")){
			String prop = properties.getProperty("bocage");
			manager.setBocage(prop);
		}
	}
	
	private static void importParcellaire(DiagnosticGrainBocagerExploitationManager manager, Properties properties) {
		if(properties.containsKey("parcellaire")){
			String prop = properties.getProperty("parcellaire");
			manager.setParcellaire(prop);
		}
	}
	
	private static void importAmenagement(DiagnosticGrainBocagerExploitationManager manager, Properties properties) {
		if(properties.containsKey("amenagement")){
			String prop = properties.getProperty("amenagement");
			manager.setAmenagement(prop);
		}
	}
	
	private static void importScenario(DiagnosticGrainBocagerExploitationManager manager, Properties properties) {
		if(properties.containsKey("scenario")){
			String prop = properties.getProperty("scenario");
			manager.setScenario(prop);
		}
	}
	
	private static void importAttributScenario(DiagnosticGrainBocagerExploitationManager manager, Properties properties) {
		if(properties.containsKey("attribut_scenario")){
			String prop = properties.getProperty("attribut_scenario");
			manager.setAttributScenario(prop);
		}
	}
	
	private static void importForce(DiagnosticGrainBocagerExploitationManager manager, Properties properties) {
		if(properties.containsKey("force")){
			boolean force = Boolean.parseBoolean(properties.getProperty("force"));
			manager.setForce(force);
		}
	}

	private static void importOutputFolder(DiagnosticGrainBocagerExploitationManager manager, Properties properties) {
		if(properties.containsKey("output_folder")){
			String prop = properties.getProperty("output_folder");
			manager.setOutputFolder(prop);
		}
	}
	
	private static void importThresholds(DiagnosticGrainBocagerExploitationManager manager, Properties properties) {
		if(properties.containsKey("thresholds")){
			String prop = properties.getProperty("thresholds");
			String[] s = prop.replace("{", "").replace("}", "").replaceAll(" ", "").split(";");
			double s1 = Double.parseDouble(s[0]);
			double s2 = Double.parseDouble(s[1]);
			double s3 = Double.parseDouble(s[2]);
			manager.setThresholds(s1, s2, s3);
		}
	}
	
	private static void importGrainBocagerWindowRadius(DiagnosticGrainBocagerExploitationManager manager, Properties properties) {
		if(properties.containsKey("grain_bocager_window_radius")){
			String prop = properties.getProperty("grain_bocager_window_radius");
			manager.setGrainBocagerWindowRadius(Double.parseDouble(prop));
		}
	}
	
	private static void importGrainBocagerCellSize(DiagnosticGrainBocagerExploitationManager manager, Properties properties) {
		if(properties.containsKey("grain_bocager_cellsize")){
			String prop = properties.getProperty("grain_bocager_cellsize");
			manager.setGrainBocagerCellSize(Double.parseDouble(prop));
		}
	}
}
